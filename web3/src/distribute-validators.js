#!/usr/bin/env node

const yargs = require('yargs');
const fs = require('fs');

const argv = yargs
    .option('node-count', {
        description: 'The number of nodes to distribute to',
        type: 'number',
        demandOption: true,
        requiresArg: true,
    })
    .option('validator-count', {
        description: 'The number of validators to distribute',
        type: 'number',
        demandOption: true,
        requiresArg: true,
    })
    .option('dir', {
        description: 'Directory generated by staking-deposit-cli',
        type: 'string',
        demandOption: true,
        requiresArg: true,
    })
    .option('out', {
        description: 'Directory to write the keystores of the validators',
        type: 'string',
        demandOption: true,
        requiresArg: true,
    })
    .help()
    .alias('node-count', 'nc')
    .alias('validator-count', 'vc')
    .alias('dir', 'd')
    .alias('out', 'o')
    .alias('help', 'h').argv;

(async function() {
    const files = fs.readdirSync(argv.dir);

    const deposits = files
        .filter(file => file.startsWith('deposit_data-'))
        .map(file => {
            const data = JSON.parse(fs.readFileSync(argv.dir + '/' + file));
            return data;
        })
        .reduce((acc, cur) => acc.concat(cur), [])
        .sort((a, b) => {
            if (a.pubkey < b.pubkey) {
                return -1;
            } else if (a.pubkey > b.pubkey) {
                return 1;
            }
            throw 'The deposit data file contains duplicated public keys';
        })
        .splice(-argv.validatorCount);

    const keystores = new Map();
    files
        .filter(file => file.startsWith('keystore-'))
        .forEach(file => {
            const content = fs.readFileSync(argv.dir + '/' + file);
            const data = JSON.parse(content);
            keystores.set(data.pubkey, content);
        });

    const validatorPerNode = Math.ceil(argv.validatorCount / argv.nodeCount);
    for (let index = 0; index < argv.nodeCount; index++) {
        const start = index * validatorPerNode;
        const data = deposits.slice(start, start + validatorPerNode);
        const path = argv.out + '/node' + (index + 1);
        const now = Math.floor(Date.now() / 1000);
        fs.mkdirSync(path, { recursive: true });
        fs.writeFileSync(path + '/deposit_data-' + now + '.json', JSON.stringify(data));
        data.forEach((deposit, idx) => {
            fs.writeFileSync(
                path + '/keystore-m_12381_3600_' + idx + '_0_0-' + now + '.json',
                keystores.get(deposit.pubkey),
            );
        });
    }

    console.log(JSON.stringify(deposits));
    process.exit();
})();
